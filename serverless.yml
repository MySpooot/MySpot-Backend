service: MySpotApi
configValidationMode: warn
useDotenv: true

plugins:
    - serverless-plugin-typescript
    - serverless-plugin-optimize
    - serverless-plugin-canary-deployments
    - serverless-apigw-binary
    - serverless-dotenv-plugin
    - serverless-offline

provider:
    name: aws
    runtime: nodejs14.x
    region: ap-northeast-2
    endpointType: REGIONAL
    stackName: ${self:service}-${self:provider.stage}
    apiName: ${self:service}-${self:provider.stage}
    memorySize: 512
    timeout: 10
    deploymentBucket: myspot-serverless-deployment
    deploymentPrefix: myspot
    environment:
        NODE_ENV: production
        stage: ${self:provider.stage}
        POSTGRES_USERNAME: ${env:POSTGRES_USERNAME}
        POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
        POSTGRES_DATABASE: ${env:POSTGRES_DATABASE}
        POSTGRES_HOST: ${env:POSTGRES_HOST}
        POSTGRES_PORT: ${env:POSTGRES_PORT}
        JWT_SECRET: ${env:JWT_SECRET}
        AWS_KEY: ${env:AWS_ACCESS_KEY_ID}
        AWS_SECRET_KEY: ${env:AWS_SECRET_ACCESS_KEY}

    iamManagedPolicies:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
    lambdaHashingVersion: 20201221

package:
    individually: true

custom:
    cors:
        origin: '*'
        headers: '*'
        allowCredentials: false
    # gateway에서 허용애햐 할 content-type 정의
    apigwBinary:
        types: #list of mime-types
            - 'image/jpeg'
            - 'image/png'
            - 'image/jpg'
            - 'multipart/form-data'
    deploymentSettings: # shifts all the traffic to the new version, useful when you only need to execute the validation hooks.
        type: AllAtOnce
        alias: ${self:provider.stage}
    # .env 파일을 읽기 위함.
    dotenv:
        path: .env
        include:
            - POSTGRES_USERNAME
            - POSTGRES_PASSWORD
            - POSTGRES_DATABASE
            - POSTGRES_HOST
            - POSTGRES_PORT
            - JWT_SECRET
            - REGION

functions:
    Auth:
        handler: src/auth/lambda.handler
        deploymentSettings: ${self:custom.deploymentSettings}
        events:
            - http:
                  method: post
                  path: /auth/login
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /auth/me
                  cors: ${self.custom.cors}

            - http:
                  method: put
                  path: /auth/user/{userId}
                  cors: ${self.custom.cors}

    Common:
        handler: src/common/lambda.handler
        deploymentSettings: ${self:custom.deploymentSettings}
        events:
            - http:
                  method: get
                  path: /common/status
                  cors: ${self.custom.cors}

    Map:
        handler: src/map/lambda.handler
        deploymentSettings: ${self:custom.deploymentSettings}
        events:
            - http:
                  method: get
                  path: /map
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/{mapId}
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/{mapId}/detail
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/{mapId}/code
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/{mapId}/code/match
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/recent
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/recent/{recentMapId}
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/recent/{recentMapId}
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/favorite
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/favorite/{favoriteMapId}
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/favorite/{favoriteMapId}
                  cors: ${self.custom.cors}

    Marker:
        handler: src/marker/lambda.handler
        deploymentSettings: ${self:custom.deploymentSettings}
        events:
            - http:
                  method: get
                  path: /map/{mapId}/marker
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/{mapId}/marker
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/marker/{markerId}
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/marker/{markerId}/like
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/marker/{markerId}/like
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/marker/location
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/marker/location
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/marker/location/{addressId}
                  cors: ${self.custom.cors}

    Reply:
        handler: src/reply/lambda.handler
        deploymentSettings: ${self:custom.deploymentSettings}
        events:
            - http:
                  method: get
                  path: /map/marker/{markerId}/replies
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/marker/{markerId}/replies
                  cors: ${self.custom.cors}

            - http:
                  method: put
                  path: /map/marker/replies/{replyId}
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/marker/replies/{replyId}
                  cors: ${self.custom.cors}
    User:
        handler: src/user/lambda.handler
        deploymentSettings: ${self:custom.deploymentSettings}
        events:
            - http:
                  method: put
                  path: /user
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /user/upload
                  cors: ${self.custom.cors}
