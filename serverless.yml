service: MySpotApi
configValidationMode: warn
useDotenv: warn
plugins:
    - serverless-plugin-typescript
    - serverless-plugin-optimize
    - serverless-apigw-binary
    - serverless-offline

provider:
    name: aws
    runtime: nodejs14.x
    region: ap-northeast-2
    endpointType: REGIONAL
    stackName: ${self:service}-${self:provider.stage}
    apiName: ${self:service}-${self:provider.stage}
    memorySize: 512
    timeout: 10
    # tracing: ?? 이 옵션 뭐지 ㅋㅋㅋㅋㅋㅋㅋ
    #     lambda: true
    deploymentBucket: myspot-serverless-deployment
    deploymentPrefix: myspot
    environment:
        NODE_ENV: production
        stage: ${self:provider.stage}
    iamManagedPolicies:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

    lambdaHashingVersion: 20201221

package:
    individually: true

custom:
    cors:
        origin: '*'
        headers: '*'
        allowCredentials: false
    apigwBinary:
        types: #list of mime-types
            - 'image/jpeg'
            - 'image/png'
            - 'image/jpg'
            - 'multipart/form-data'

    # deploymentSettings:
    #     type: AllAtOnce # shifts all the traffic to the new version, useful when you only need to execute the validation hooks.
    #     alias: ${self.custom.stage}

functions:
    Auth:
        handler: src/auth/lambda.handler
        events:
            - http:
                  method: post
                  path: /auth/login
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /auth/me
                  cors: ${self.custom.cors}

            - http:
                  method: put
                  path: /auth/user/{userId}
                  cors: ${self.custom.cors}

    Common: # lambda function name
        handler: src/common/lambda.handler
        events:
            - http:
                  method: get
                  path: /common/status
                  cors: ${self.custom.cors}

    Map:
        handler: src/map/lambda.handler
        events:
            - http:
                  method: get
                  path: /map
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/{mapId}
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/{mapId}/detail
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/{mapId}/code
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/{mapId}/code/match
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/recent
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/recent/{recentMapId}
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/recent/{recentMapId}
                  cors: ${self.custom.cors}

            - http:
                  method: get
                  path: /map/favorite
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /map/favorite/{favoriteMapId}
                  cors: ${self.custom.cors}

            - http:
                  method: delete
                  path: /map/favorite/{favoriteMapId}
                  cors: ${self.custom.cors}

    #     Marker:
    #         handler: src/marker/lambda.handler
    #         events:
    #             - http:
    #                   method: get
    #                   path: /map/{mapId}/marker
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: post
    #                   path: /map/{mapId}/marker
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: delete
    #                   path: /map/marker/{markerId}
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: post
    #                   path: /map/marker/{markerId}/like
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: delete
    #                   path: /map/marker/{markerId}/like
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: get
    #                   path: /map/marker/location
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: post
    #                   path: /map/marker/location
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: delete
    #                   path: /map/marker/location/{addressId}
    #                   cors: ${self.custom.cors}

    #     Reply:
    #         handler: src/reply/lambda.handler
    #         events:
    #             - http:
    #                   method: get
    #                   path: /map/marker/{markerId}/replies
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: post
    #                   path: /map/marker/{markerId}/replies
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: put
    #                   path: /map/marker/replies/{replyId}
    #                   cors: ${self.custom.cors}

    #             - http:
    #                   method: delete
    #                   path: /map/marker/replies/{replyId}
    #                   cors: ${self.custom.cors}
    User:
        handler: src/user/lambda.handler
        events:
            - http:
                  method: put
                  path: /user
                  cors: ${self.custom.cors}

            - http:
                  method: post
                  path: /user/upload
                  cors: ${self.custom.cors}
